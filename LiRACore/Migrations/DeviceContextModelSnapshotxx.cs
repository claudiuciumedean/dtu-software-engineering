// <auto-generated />
using System;
using LiRACore.Models.RawData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace LiRACore.Migrations
{
    [DbContext(typeof(DeviceContext))]
    partial class DeviceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("LiRACore.Models.Node", b =>
                {
                    b.Property<Guid>("NodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FK_Section")
                        .HasColumnType("uuid");

                    b.Property<float>("lat")
                        .HasColumnType("real");

                    b.Property<float>("lon")
                        .HasColumnType("real");

                    b.HasKey("NodeId");

                    b.HasIndex("FK_Section");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("LiRACore.Models.RawData.Device", b =>
                {
                    b.Property<Guid>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("Updated_Date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("DeviceId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("LiRACore.Models.RawData.Measurement", b =>
                {
                    b.Property<Guid>("MeasurementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FK_MeasurementType")
                        .HasColumnType("integer");

                    b.Property<Guid>("FK_Trip")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("Rec")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("T")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("TS")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Updated_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("VId")
                        .HasColumnType("bigint");

                    b.Property<bool>("isComputed")
                        .HasColumnType("boolean");

                    b.Property<float?>("lat")
                        .HasColumnType("real");

                    b.Property<float?>("lon")
                        .HasColumnType("real");

                    b.Property<string>("message")
                        .HasColumnType("text");

                    b.HasKey("MeasurementId");

                    b.HasIndex("FK_MeasurementType");

                    b.HasIndex("FK_Trip");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("LiRACore.Models.RawData.MeasurementType", b =>
                {
                    b.Property<int>("MeasurementTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("source")
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.HasKey("MeasurementTypeId");

                    b.ToTable("Measurement_Types");
                });

            modelBuilder.Entity("LiRACore.Models.RawData.Trip", b =>
                {
                    b.Property<Guid>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("DistanceKm")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset?>("Duration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EndPositionDisplay")
                        .HasColumnType("text");

                    b.Property<string>("EndPositionLat")
                        .HasColumnType("text");

                    b.Property<string>("EndPositionLng")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EndTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FK_Device")
                        .HasColumnType("uuid");

                    b.Property<string>("StartPositionDisplay")
                        .HasColumnType("text");

                    b.Property<string>("StartPositionLat")
                        .HasColumnType("text");

                    b.Property<string>("StartPositionLng")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("StartTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("Updated_Date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TripId");

                    b.HasIndex("FK_Device");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("LiRACore.Models.Road", b =>
                {
                    b.Property<long>("OSM_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("wayPointName")
                        .HasColumnType("text");

                    b.HasKey("OSM_Id");

                    b.ToTable("Roads");
                });

            modelBuilder.Entity("LiRACore.Models.Section", b =>
                {
                    b.Property<Guid>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("FK_Road")
                        .HasColumnType("bigint");

                    b.HasKey("SectionId");

                    b.HasIndex("FK_Road");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("LiRACore.Models.Node", b =>
                {
                    b.HasOne("LiRACore.Models.Section", "Section")
                        .WithMany("Nodes")
                        .HasForeignKey("FK_Section")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LiRACore.Models.RawData.Measurement", b =>
                {
                    b.HasOne("LiRACore.Models.RawData.MeasurementType", "Measurement_Type")
                        .WithMany("Measurements")
                        .HasForeignKey("FK_MeasurementType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiRACore.Models.RawData.Trip", "Trip")
                        .WithMany("Measurements")
                        .HasForeignKey("FK_Trip")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("LiRACore.Models.RoadReference", "RoadReference", b1 =>
                        {
                            b1.Property<Guid>("RoadReferenceId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<Guid>("FK_MeasurementId")
                                .HasColumnType("uuid");

                            b1.Property<string>("direction")
                                .HasColumnType("text");

                            b1.Property<string>("lane")
                                .HasColumnType("text");

                            b1.Property<float?>("lat_MapMatched")
                                .HasColumnType("real");

                            b1.Property<string>("legDistance_MapMatched")
                                .HasColumnType("text");

                            b1.Property<string>("legSummary_MapMatched")
                                .HasColumnType("text");

                            b1.Property<float?>("lon_MapMatched")
                                .HasColumnType("real");

                            b1.Property<string>("nodeId_MapMatched")
                                .HasColumnType("text");

                            b1.Property<string>("offset")
                                .HasColumnType("text");

                            b1.Property<string>("wayPointName")
                                .HasColumnType("text");

                            b1.HasKey("RoadReferenceId");

                            b1.HasIndex("FK_MeasurementId")
                                .IsUnique();

                            b1.ToTable("RoadReference");

                            b1.WithOwner()
                                .HasForeignKey("FK_MeasurementId");
                        });
                });

            modelBuilder.Entity("LiRACore.Models.RawData.Trip", b =>
                {
                    b.HasOne("LiRACore.Models.RawData.Device", "Device")
                        .WithMany("Trips")
                        .HasForeignKey("FK_Device")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LiRACore.Models.Section", b =>
                {
                    b.HasOne("LiRACore.Models.Road", "Road")
                        .WithMany("Sections")
                        .HasForeignKey("FK_Road")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
