// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using LiRACore.Models.AutoPi;
//
//    var autoPiSensor = AutoPiSensor.FromJson(jsonString);

namespace LiRACore.Models.RawData
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;


    public partial class AutoPiSensor
    {
        [JsonProperty("@vid")]
        public long Vid { get; set; }

        [JsonProperty("@uid")]
        public Guid Uid { get; set; }

        [JsonProperty("acc.xyz.pitch", NullValueHandling = NullValueHandling.Ignore)]
        public double? AccXyzPitch { get; set; }

        [JsonProperty("acc.xyz.roll", NullValueHandling = NullValueHandling.Ignore)]
        public double? AccXyzRoll { get; set; }

        [JsonProperty("@ts")]
        public DateTimeOffset Ts { get; set; }

        [JsonProperty("@t")]
        public T T { get; set; }

        [JsonProperty("acc.xyz.z", NullValueHandling = NullValueHandling.Ignore)]
        public double? AccXyzZ { get; set; }

        [JsonProperty("acc.xyz.y", NullValueHandling = NullValueHandling.Ignore)]
        public double? AccXyzY { get; set; }

        [JsonProperty("acc.xyz.x", NullValueHandling = NullValueHandling.Ignore)]
        public double? AccXyzX { get; set; }

        [JsonProperty("@rec")]
        public DateTimeOffset Rec { get; set; }

        [JsonProperty("obd.brk_trq_req_dvr.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdBrkTrqReqDvrValue { get; set; }

        [JsonProperty("obd.brk_trq_req_elec.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdBrkTrqReqElecValue { get; set; }

        [JsonProperty("obd.rpm.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdRpmValue { get; set; }

        [JsonProperty("obd.trq_eff.value", NullValueHandling = NullValueHandling.Ignore)]
        public double? ObdTrqEffValue { get; set; }

        [JsonProperty("obd.trq_req.value", NullValueHandling = NullValueHandling.Ignore)]
        public double? ObdTrqReqValue { get; set; }

        [JsonProperty("obd.whl_trq_est.value", NullValueHandling = NullValueHandling.Ignore)]
        public double? ObdWhlTrqEstValue { get; set; }

        [JsonProperty("obd.brk_trq_elec.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdBrkTrqElecValue { get; set; }

        [JsonProperty("obd.rpm_elec.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdRpmElecValue { get; set; }

        [JsonProperty("obd.whl_trq_pot_ri.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdWhlTrqPotRiValue { get; set; }

        [JsonProperty("obd.rpm_rl.value", NullValueHandling = NullValueHandling.Ignore)]
        public double? ObdRpmRlValue { get; set; }

        [JsonProperty("obd.rpm_rr.value", NullValueHandling = NullValueHandling.Ignore)]
        public double? ObdRpmRrValue { get; set; }

        [JsonProperty("obd.msr_trq_req.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdMsrTrqReqValue { get; set; }

        [JsonProperty("obd.asr_trq_req_dyn.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdAsrTrqReqDynValue { get; set; }

        [JsonProperty("obd.asr_trq_req_st.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdAsrTrqReqStValue { get; set; }

        [JsonProperty("obd.acc_trans.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdAccTransValue { get; set; }

        [JsonProperty("obd.acc_long.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdAccLongValue { get; set; }

        [JsonProperty("obd.acc_yaw.value", NullValueHandling = NullValueHandling.Ignore)]
        public double? ObdAccYawValue { get; set; }

        [JsonProperty("obd.rpm_fr.value", NullValueHandling = NullValueHandling.Ignore)]
        public double? ObdRpmFrValue { get; set; }

        [JsonProperty("obd.spd_veh.value", NullValueHandling = NullValueHandling.Ignore)]
        public double? ObdSpdVehValue { get; set; }

        [JsonProperty("obd.rpm_fl.value", NullValueHandling = NullValueHandling.Ignore)]
        public double? ObdRpmFlValue { get; set; }

        [JsonProperty("obd.ww_f_req.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdWwFReqValue { get; set; }

        [JsonProperty("obd.ww_f_stat.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdWwFStatValue { get; set; }

        [JsonProperty("obd.ww_f_stop.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdWwFStopValue { get; set; }

        [JsonProperty("obd.odo.value", NullValueHandling = NullValueHandling.Ignore)]
        public double? ObdOdoValue { get; set; }

        [JsonProperty("obd.f_dist.value", NullValueHandling = NullValueHandling.Ignore)]
        public double? ObdFDistValue { get; set; }

        [JsonProperty("obd.spd.value", NullValueHandling = NullValueHandling.Ignore)]
        public double? ObdSpdValue { get; set; }

        [JsonProperty("obd.temp_ext.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdTempExtValue { get; set; }

        [JsonProperty("obd.trac_cons.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdTracConsValue { get; set; }

        [JsonProperty("obd.trip_cons.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdTripConsValue { get; set; }

        [JsonProperty("obd.trip_spd_avg.value", NullValueHandling = NullValueHandling.Ignore)]
        public double? ObdTripSpdAvgValue { get; set; }

        [JsonProperty("obd.trip_cons_avg.value", NullValueHandling = NullValueHandling.Ignore)]
        public double? ObdTripConsAvgValue { get; set; }

        [JsonProperty("obd.trip_dist.value", NullValueHandling = NullValueHandling.Ignore)]
        public double? ObdTripDistValue { get; set; }

        [JsonProperty("@tag", NullValueHandling = NullValueHandling.Ignore)]
        public string Tag { get; set; }

        [JsonProperty("rpi.temp.cpu", NullValueHandling = NullValueHandling.Ignore)]
        public RpiTemp RpiTempCpu { get; set; }

        [JsonProperty("rpi.temp.gpu", NullValueHandling = NullValueHandling.Ignore)]
        public RpiTemp RpiTempGpu { get; set; }

        [JsonProperty("obd.temp.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdTempValue { get; set; }

        [JsonProperty("obd.cons_avg.value", NullValueHandling = NullValueHandling.Ignore)]
        public double? ObdConsAvgValue { get; set; }

        [JsonProperty("obd.strg_ang.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdStrgAngValue { get; set; }

        [JsonProperty("obd.strg_acc.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdStrgAccValue { get; set; }

        [JsonProperty("obd.strg_pos.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdStrgPosValue { get; set; }

        [JsonProperty("track.pos.utc", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? TrackPosUtc { get; set; }

        [JsonProperty("track.pos.alt", NullValueHandling = NullValueHandling.Ignore)]
        public double? TrackPosAlt { get; set; }

        [JsonProperty("track.pos.nsat", NullValueHandling = NullValueHandling.Ignore)]
        public long? TrackPosNsat { get; set; }

        [JsonProperty("track.pos.cog", NullValueHandling = NullValueHandling.Ignore)]
        public double? TrackPosCog { get; set; }

        [JsonProperty("track.pos.sog", NullValueHandling = NullValueHandling.Ignore)]
        public double? TrackPosSog { get; set; }

        [JsonProperty("track.pos.loc", NullValueHandling = NullValueHandling.Ignore)]
        public TrackPosLoc TrackPosLoc { get; set; }

        [JsonProperty("obd.sb_stat_rc.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdSbStatRcValue { get; set; }

        [JsonProperty("obd.sb_stat_rl.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdSbStatRlValue { get; set; }

        [JsonProperty("obd.sb_rem_fr.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdSbRemFrValue { get; set; }

        [JsonProperty("obd.sb_rem_fl.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdSbRemFlValue { get; set; }

        [JsonProperty("obd.sb_stat_rr.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdSbStatRrValue { get; set; }

        [JsonProperty("obd.time.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdTimeValue { get; set; }

        [JsonProperty("obd.whl_prs_rr.value", NullValueHandling = NullValueHandling.Ignore)]
        public double? ObdWhlPrsRrValue { get; set; }

        [JsonProperty("obd.whl_prs_fr.value", NullValueHandling = NullValueHandling.Ignore)]
        public double? ObdWhlPrsFrValue { get; set; }

        [JsonProperty("obd.whl_prs_rl.value", NullValueHandling = NullValueHandling.Ignore)]
        public double? ObdWhlPrsRlValue { get; set; }

        [JsonProperty("obd.whl_prs_fl.value", NullValueHandling = NullValueHandling.Ignore)]
        public double? ObdWhlPrsFlValue { get; set; }

        [JsonProperty("event.system.time.source", NullValueHandling = NullValueHandling.Ignore)]
        public string EventSystemTimeSource { get; set; }

        [JsonProperty("event.system.power.trigger", NullValueHandling = NullValueHandling.Ignore)]
        public string EventSystemPowerTrigger { get; set; }

        [JsonProperty("event.vehicle.obd.protocol", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? EventVehicleObdProtocol { get; set; }

        [JsonProperty("event.vehicle.obd.autodetected", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EventVehicleObdAutodetected { get; set; }

        [JsonProperty("event.system.network.wwan0.reason", NullValueHandling = NullValueHandling.Ignore)]
        public string EventSystemNetworkWwan0Reason { get; set; }
    }

    public partial class RpiTemp
    {
        [JsonProperty("unit")]
        public Unit Unit { get; set; }

        [JsonProperty("value")]
        public double Value { get; set; }
    }

    public partial class TrackPosLoc
    {
        [JsonProperty("lat")]
        public double Lat { get; set; }

        [JsonProperty("lon")]
        public double Lon { get; set; }
    }

    public enum Unit { C };

    public enum T { AccXyz, EventSystemNetworkWwan0, EventSystemPower, EventSystemTime, EventVehicleEngine, EventVehicleObd, EventVehiclePosition, ObdAccLong, ObdAccTrans, ObdAccYaw, ObdAsrTrqReqDyn, ObdAsrTrqReqSt, ObdBrkTrqElec, ObdBrkTrqReqDvr, ObdBrkTrqReqElec, ObdConsAvg, ObdFDist, ObdMsrTrqReq, ObdOdo, ObdRpm, ObdRpmElec, ObdRpmFl, ObdRpmFr, ObdRpmRl, ObdRpmRr, ObdSbRemFl, ObdSbRemFr, ObdSbStatRc, ObdSbStatRl, ObdSbStatRr, ObdSpd, ObdSpdVeh, ObdStrgAcc, ObdStrgAng, ObdStrgPos, ObdTemp, ObdTempExt, ObdTime, ObdTracCons, ObdTripCons, ObdTripConsAvg, ObdTripDist, ObdTripSpdAvg, ObdTrqEff, ObdTrqReq, ObdWhlPrsFl, ObdWhlPrsFr, ObdWhlPrsRl, ObdWhlPrsRr, ObdWhlTrqEst, ObdWhlTrqPotRi, ObdWwFReq, ObdWwFStat, ObdWwFStop, RpiTemp, TrackPos };

    public partial class AutoPiSensor
    {
        public static AutoPiSensor[] FromJson(string json) => JsonConvert.DeserializeObject<AutoPiSensor[]>(json, LiRACore.Models.RawData.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this AutoPiSensor[] self) => JsonConvert.SerializeObject(self, LiRACore.Models.RawData.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TConverter.Singleton,
                UnitConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(T) || t == typeof(T?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "acc.xyz":
                    return T.AccXyz;
                case "event.system.network.wwan0":
                    return T.EventSystemNetworkWwan0;
                case "event.system.power":
                    return T.EventSystemPower;
                case "event.system.time":
                    return T.EventSystemTime;
                case "event.vehicle.engine":
                    return T.EventVehicleEngine;
                case "event.vehicle.obd":
                    return T.EventVehicleObd;
                case "event.vehicle.position":
                    return T.EventVehiclePosition;
                case "obd.acc_long":
                    return T.ObdAccLong;
                case "obd.acc_trans":
                    return T.ObdAccTrans;
                case "obd.acc_yaw":
                    return T.ObdAccYaw;
                case "obd.asr_trq_req_dyn":
                    return T.ObdAsrTrqReqDyn;
                case "obd.asr_trq_req_st":
                    return T.ObdAsrTrqReqSt;
                case "obd.brk_trq_elec":
                    return T.ObdBrkTrqElec;
                case "obd.brk_trq_req_dvr":
                    return T.ObdBrkTrqReqDvr;
                case "obd.brk_trq_req_elec":
                    return T.ObdBrkTrqReqElec;
                case "obd.cons_avg":
                    return T.ObdConsAvg;
                case "obd.f_dist":
                    return T.ObdFDist;
                case "obd.msr_trq_req":
                    return T.ObdMsrTrqReq;
                case "obd.odo":
                    return T.ObdOdo;
                case "obd.rpm":
                    return T.ObdRpm;
                case "obd.rpm_elec":
                    return T.ObdRpmElec;
                case "obd.rpm_fl":
                    return T.ObdRpmFl;
                case "obd.rpm_fr":
                    return T.ObdRpmFr;
                case "obd.rpm_rl":
                    return T.ObdRpmRl;
                case "obd.rpm_rr":
                    return T.ObdRpmRr;
                case "obd.sb_rem_fl":
                    return T.ObdSbRemFl;
                case "obd.sb_rem_fr":
                    return T.ObdSbRemFr;
                case "obd.sb_stat_rc":
                    return T.ObdSbStatRc;
                case "obd.sb_stat_rl":
                    return T.ObdSbStatRl;
                case "obd.sb_stat_rr":
                    return T.ObdSbStatRr;
                case "obd.spd":
                    return T.ObdSpd;
                case "obd.spd_veh":
                    return T.ObdSpdVeh;
                case "obd.strg_acc":
                    return T.ObdStrgAcc;
                case "obd.strg_ang":
                    return T.ObdStrgAng;
                case "obd.strg_pos":
                    return T.ObdStrgPos;
                case "obd.temp":
                    return T.ObdTemp;
                case "obd.temp_ext":
                    return T.ObdTempExt;
                case "obd.time":
                    return T.ObdTime;
                case "obd.trac_cons":
                    return T.ObdTracCons;
                case "obd.trip_cons":
                    return T.ObdTripCons;
                case "obd.trip_cons_avg":
                    return T.ObdTripConsAvg;
                case "obd.trip_dist":
                    return T.ObdTripDist;
                case "obd.trip_spd_avg":
                    return T.ObdTripSpdAvg;
                case "obd.trq_eff":
                    return T.ObdTrqEff;
                case "obd.trq_req":
                    return T.ObdTrqReq;
                case "obd.whl_prs_fl":
                    return T.ObdWhlPrsFl;
                case "obd.whl_prs_fr":
                    return T.ObdWhlPrsFr;
                case "obd.whl_prs_rl":
                    return T.ObdWhlPrsRl;
                case "obd.whl_prs_rr":
                    return T.ObdWhlPrsRr;
                case "obd.whl_trq_est":
                    return T.ObdWhlTrqEst;
                case "obd.whl_trq_pot_ri":
                    return T.ObdWhlTrqPotRi;
                case "obd.ww_f_req":
                    return T.ObdWwFReq;
                case "obd.ww_f_stat":
                    return T.ObdWwFStat;
                case "obd.ww_f_stop":
                    return T.ObdWwFStop;
                case "rpi.temp":
                    return T.RpiTemp;
                case "track.pos":
                    return T.TrackPos;
            }
            throw new Exception("Cannot unmarshal type T");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (T)untypedValue;
            switch (value)
            {
                case T.AccXyz:
                    serializer.Serialize(writer, "acc.xyz");
                    return;
                case T.EventSystemNetworkWwan0:
                    serializer.Serialize(writer, "event.system.network.wwan0");
                    return;
                case T.EventSystemPower:
                    serializer.Serialize(writer, "event.system.power");
                    return;
                case T.EventSystemTime:
                    serializer.Serialize(writer, "event.system.time");
                    return;
                case T.EventVehicleEngine:
                    serializer.Serialize(writer, "event.vehicle.engine");
                    return;
                case T.EventVehicleObd:
                    serializer.Serialize(writer, "event.vehicle.obd");
                    return;
                case T.EventVehiclePosition:
                    serializer.Serialize(writer, "event.vehicle.position");
                    return;
                case T.ObdAccLong:
                    serializer.Serialize(writer, "obd.acc_long");
                    return;
                case T.ObdAccTrans:
                    serializer.Serialize(writer, "obd.acc_trans");
                    return;
                case T.ObdAccYaw:
                    serializer.Serialize(writer, "obd.acc_yaw");
                    return;
                case T.ObdAsrTrqReqDyn:
                    serializer.Serialize(writer, "obd.asr_trq_req_dyn");
                    return;
                case T.ObdAsrTrqReqSt:
                    serializer.Serialize(writer, "obd.asr_trq_req_st");
                    return;
                case T.ObdBrkTrqElec:
                    serializer.Serialize(writer, "obd.brk_trq_elec");
                    return;
                case T.ObdBrkTrqReqDvr:
                    serializer.Serialize(writer, "obd.brk_trq_req_dvr");
                    return;
                case T.ObdBrkTrqReqElec:
                    serializer.Serialize(writer, "obd.brk_trq_req_elec");
                    return;
                case T.ObdConsAvg:
                    serializer.Serialize(writer, "obd.cons_avg");
                    return;
                case T.ObdFDist:
                    serializer.Serialize(writer, "obd.f_dist");
                    return;
                case T.ObdMsrTrqReq:
                    serializer.Serialize(writer, "obd.msr_trq_req");
                    return;
                case T.ObdOdo:
                    serializer.Serialize(writer, "obd.odo");
                    return;
                case T.ObdRpm:
                    serializer.Serialize(writer, "obd.rpm");
                    return;
                case T.ObdRpmElec:
                    serializer.Serialize(writer, "obd.rpm_elec");
                    return;
                case T.ObdRpmFl:
                    serializer.Serialize(writer, "obd.rpm_fl");
                    return;
                case T.ObdRpmFr:
                    serializer.Serialize(writer, "obd.rpm_fr");
                    return;
                case T.ObdRpmRl:
                    serializer.Serialize(writer, "obd.rpm_rl");
                    return;
                case T.ObdRpmRr:
                    serializer.Serialize(writer, "obd.rpm_rr");
                    return;
                case T.ObdSbRemFl:
                    serializer.Serialize(writer, "obd.sb_rem_fl");
                    return;
                case T.ObdSbRemFr:
                    serializer.Serialize(writer, "obd.sb_rem_fr");
                    return;
                case T.ObdSbStatRc:
                    serializer.Serialize(writer, "obd.sb_stat_rc");
                    return;
                case T.ObdSbStatRl:
                    serializer.Serialize(writer, "obd.sb_stat_rl");
                    return;
                case T.ObdSbStatRr:
                    serializer.Serialize(writer, "obd.sb_stat_rr");
                    return;
                case T.ObdSpd:
                    serializer.Serialize(writer, "obd.spd");
                    return;
                case T.ObdSpdVeh:
                    serializer.Serialize(writer, "obd.spd_veh");
                    return;
                case T.ObdStrgAcc:
                    serializer.Serialize(writer, "obd.strg_acc");
                    return;
                case T.ObdStrgAng:
                    serializer.Serialize(writer, "obd.strg_ang");
                    return;
                case T.ObdStrgPos:
                    serializer.Serialize(writer, "obd.strg_pos");
                    return;
                case T.ObdTemp:
                    serializer.Serialize(writer, "obd.temp");
                    return;
                case T.ObdTempExt:
                    serializer.Serialize(writer, "obd.temp_ext");
                    return;
                case T.ObdTime:
                    serializer.Serialize(writer, "obd.time");
                    return;
                case T.ObdTracCons:
                    serializer.Serialize(writer, "obd.trac_cons");
                    return;
                case T.ObdTripCons:
                    serializer.Serialize(writer, "obd.trip_cons");
                    return;
                case T.ObdTripConsAvg:
                    serializer.Serialize(writer, "obd.trip_cons_avg");
                    return;
                case T.ObdTripDist:
                    serializer.Serialize(writer, "obd.trip_dist");
                    return;
                case T.ObdTripSpdAvg:
                    serializer.Serialize(writer, "obd.trip_spd_avg");
                    return;
                case T.ObdTrqEff:
                    serializer.Serialize(writer, "obd.trq_eff");
                    return;
                case T.ObdTrqReq:
                    serializer.Serialize(writer, "obd.trq_req");
                    return;
                case T.ObdWhlPrsFl:
                    serializer.Serialize(writer, "obd.whl_prs_fl");
                    return;
                case T.ObdWhlPrsFr:
                    serializer.Serialize(writer, "obd.whl_prs_fr");
                    return;
                case T.ObdWhlPrsRl:
                    serializer.Serialize(writer, "obd.whl_prs_rl");
                    return;
                case T.ObdWhlPrsRr:
                    serializer.Serialize(writer, "obd.whl_prs_rr");
                    return;
                case T.ObdWhlTrqEst:
                    serializer.Serialize(writer, "obd.whl_trq_est");
                    return;
                case T.ObdWhlTrqPotRi:
                    serializer.Serialize(writer, "obd.whl_trq_pot_ri");
                    return;
                case T.ObdWwFReq:
                    serializer.Serialize(writer, "obd.ww_f_req");
                    return;
                case T.ObdWwFStat:
                    serializer.Serialize(writer, "obd.ww_f_stat");
                    return;
                case T.ObdWwFStop:
                    serializer.Serialize(writer, "obd.ww_f_stop");
                    return;
                case T.RpiTemp:
                    serializer.Serialize(writer, "rpi.temp");
                    return;
                case T.TrackPos:
                    serializer.Serialize(writer, "track.pos");
                    return;
            }
            throw new Exception("Cannot marshal type T");
        }

        public static readonly TConverter Singleton = new TConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class UnitConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Unit) || t == typeof(Unit?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "C")
            {
                return Unit.C;
            }
            throw new Exception("Cannot unmarshal type Unit");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Unit)untypedValue;
            if (value == Unit.C)
            {
                serializer.Serialize(writer, "C");
                return;
            }
            throw new Exception("Cannot marshal type Unit");
        }

        public static readonly UnitConverter Singleton = new UnitConverter();
    }
}
