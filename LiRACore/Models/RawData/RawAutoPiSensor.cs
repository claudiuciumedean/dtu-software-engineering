using System;
using System.Collections.Generic;
using System.Text;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using LiRACore.Models;
//
//    var autoPiSensor = AutoPiSensor.FromJson(jsonString);

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using LiRACore.Models;
//
//    var autoPiSensor = AutoPiSensor.FromJson(jsonString);

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using LiRACore.Models;
//
//    var autoPiSensor = AutoPiSensor.FromJson(jsonString);

namespace LiRACore.Models.RawData.Raw
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using LiRACore.Helpers;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class RawAutoPiSensor
    {
        [JsonProperty("hits", NullValueHandling = NullValueHandling.Ignore)]
        public Hits Hits { get; set; }
    }

    public partial class Hits
    {
        [JsonProperty("hits", NullValueHandling = NullValueHandling.Ignore)]
        public Hit[] HitsHits { get; set; }
    }

    public partial class Hit
    {
        [JsonProperty("_source", NullValueHandling = NullValueHandling.Ignore)]
        public Source Source { get; set; }
    }

    public partial class Source
    {
        [JsonProperty("@vid", NullValueHandling = NullValueHandling.Ignore)]
        public long? Vid { get; set; }

        [JsonProperty("event.system.time.old", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? EventSystemTimeOld { get; set; }

        [JsonProperty("@tag", NullValueHandling = NullValueHandling.Ignore)]
        public string Tag { get; set; }

        [JsonProperty("@t", NullValueHandling = NullValueHandling.Ignore)]
        public string T { get; set; }

        [JsonProperty("event.system.time.source", NullValueHandling = NullValueHandling.Ignore)]
        public string EventSystemTimeSource { get; set; }

        [JsonProperty("@ts", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset Ts { get; set; }

        [JsonProperty("@uid", NullValueHandling = NullValueHandling.Ignore)]
        public Guid? Uid { get; set; }

        [JsonProperty("@rec", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Rec { get; set; }

        [JsonProperty("event.system.time.new", NullValueHandling = NullValueHandling.Ignore)]
        public string EventSystemTimeNew { get; set; }

        [JsonProperty("event.system.power.trigger", NullValueHandling = NullValueHandling.Ignore)]
        public string EventSystemPowerTrigger { get; set; }

        [JsonProperty("acc.xyz.z", NullValueHandling = NullValueHandling.Ignore)]
        public double? AccXyzZ { get; set; }

        [JsonProperty("acc.xyz.y", NullValueHandling = NullValueHandling.Ignore)]
        public double? AccXyzY { get; set; }

        [JsonProperty("acc.xyz.x", NullValueHandling = NullValueHandling.Ignore)]
        public double? AccXyzX { get; set; }

        [JsonProperty("event.vehicle.obd.protocol", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? EventVehicleObdProtocol { get; set; }

        [JsonProperty("event.vehicle.obd.autodetected", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EventVehicleObdAutodetected { get; set; }

        [JsonProperty("obd.bat.voltage", NullValueHandling = NullValueHandling.Ignore)]
        public double? ObdBatVoltage { get; set; }

        [JsonProperty("obd.bat.state", NullValueHandling = NullValueHandling.Ignore)]
        public string ObdBatState { get; set; }

        [JsonProperty("obd.bat.level", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdBatLevel { get; set; }

        [JsonProperty("obd.speed.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdSpeedValue { get; set; }

        [JsonProperty("obd.speed.unit", NullValueHandling = NullValueHandling.Ignore)]
        public string ObdSpeedUnit { get; set; }

        [JsonProperty("obd.rpm.unit", NullValueHandling = NullValueHandling.Ignore)]
        public string ObdRpmUnit { get; set; }

        [JsonProperty("obd.rpm.value", NullValueHandling = NullValueHandling.Ignore)]
        public double? ObdRpmValue { get; set; }

        [JsonProperty("obd.engine_load.unit", NullValueHandling = NullValueHandling.Ignore)]
        public string ObdEngineLoadUnit { get; set; }

        [JsonProperty("obd.engine_load.value", NullValueHandling = NullValueHandling.Ignore)]
        public double? ObdEngineLoadValue { get; set; }

        [JsonProperty("obd.coolant_temp.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdCoolantTempValue { get; set; }

        [JsonProperty("obd.coolant_temp.unit", NullValueHandling = NullValueHandling.Ignore)]
        public string ObdCoolantTempUnit { get; set; }

        [JsonProperty("obd.intake_temp.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdIntakeTempValue { get; set; }

        [JsonProperty("obd.intake_temp.unit", NullValueHandling = NullValueHandling.Ignore)]
        public string ObdIntakeTempUnit { get; set; }

        [JsonProperty("obd.ambiant_air_temp.value", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObdAmbiantAirTempValue { get; set; }

        [JsonProperty("obd.ambiant_air_temp.unit", NullValueHandling = NullValueHandling.Ignore)]
        public string ObdAmbiantAirTempUnit { get; set; }

        [JsonProperty("rpi.temp.cpu", NullValueHandling = NullValueHandling.Ignore)]
        public RpiTemp RpiTempCpu { get; set; }

        [JsonProperty("rpi.temp.gpu", NullValueHandling = NullValueHandling.Ignore)]
        public RpiTemp RpiTempGpu { get; set; }

        [JsonProperty("track.pos.utc", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? TrackPosUtc { get; set; }

        [JsonProperty("track.pos.cog", NullValueHandling = NullValueHandling.Ignore)]
        public double? TrackPosCog { get; set; }

        [JsonProperty("track.pos.nsat", NullValueHandling = NullValueHandling.Ignore)]
        public long? TrackPosNsat { get; set; }

        [JsonProperty("track.pos.alt", NullValueHandling = NullValueHandling.Ignore)]
        public double? TrackPosAlt { get; set; }

        [JsonProperty("track.pos.sog", NullValueHandling = NullValueHandling.Ignore)]
        public double? TrackPosSog { get; set; }

        [JsonProperty("track.pos.loc", NullValueHandling = NullValueHandling.Ignore)]
        public TrackPosLoc TrackPosLoc { get; set; }
    }

    public partial class RpiTemp
    {
        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public double? Value { get; set; }

        [JsonProperty("unit", NullValueHandling = NullValueHandling.Ignore)]
        public string Unit { get; set; }
    }

    public partial class TrackPosLoc
    {
        [JsonProperty("lat", NullValueHandling = NullValueHandling.Ignore)]
        public float? Lat { get; set; }

        [JsonProperty("lon", NullValueHandling = NullValueHandling.Ignore)]
        public float? Lon { get; set; }
    }

    public partial class RawAutoPiSensor
    {
        public static RawAutoPiSensor FromJson(string json) => JsonConvert.DeserializeObject<RawAutoPiSensor>(json, Helpers.Converter.Settings);
    }

    //public static class Serialize
    //{
    //    public static string ToJson(this RawAutoPiSensor self) => JsonConvert.SerializeObject(self, LiRACore.Models.RawData.Converter.Settings);
    //}

    //internal static class Converter
    //{
    //    public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
    //    {
    //        MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
    //        DateParseHandling = DateParseHandling.None,
    //        Converters =
    //        {
    //            new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
    //        },
    //    };
    //}

    //internal class ParseStringConverter : JsonConverter
    //{
    //    public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

    //    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    //    {
    //        if (reader.TokenType == JsonToken.Null) return null;
    //        var value = serializer.Deserialize<string>(reader);
    //        long l;
    //        if (Int64.TryParse(value, out l))
    //        {
    //            return l;
    //        }
    //        throw new Exception("Cannot unmarshal type long");
    //    }

    //    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    //    {
    //        if (untypedValue == null)
    //        {
    //            serializer.Serialize(writer, null);
    //            return;
    //        }
    //        var value = (long)untypedValue;
    //        serializer.Serialize(writer, value.ToString());
    //        return;
    //    }

    //    public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    //}




}






