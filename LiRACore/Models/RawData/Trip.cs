using System;
using System.Collections.Generic;
using System.Text;

namespace LiRACore.Models.RawData
{
    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using QuickLiRACore.Models.RawData.Trip;
    //
    //    var ttip = Ttip.FromJson(jsonString);


        using System;
        using System.Collections.Generic;
        using System.ComponentModel.DataAnnotations;
        using System.ComponentModel.DataAnnotations.Schema;
        using System.Globalization;
        using Newtonsoft.Json;
        using Newtonsoft.Json.Converters;

        public partial class Trip
        {

           public Trip()
            {

                Measurements = new List<Measurement>();
            }

            //[JsonProperty("LiRA_id")]
            //public Guid LiRA_Id { get; set; }

            // public Guid LiRA_Trip_Id { get; set; }
            //Primary_Key
            [Key]
            //[JsonProperty("id")]
            public Guid TripId { get; set; }

           // [JsonProperty("start_time_utc")]
            public DateTimeOffset? StartTimeUtc { get; set; }

            //[JsonProperty("end_time_utc")]
            public DateTimeOffset? EndTimeUtc { get; set; }

            //[JsonProperty("start_position_lat")]
            public string StartPositionLat { get; set; }

            //[JsonProperty("start_position_lng")]
            public string StartPositionLng { get; set; }

            //[JsonProperty("start_position_display")]
            public string StartPositionDisplay { get; set; }

            //[JsonProperty("end_position_lat")]
            public string EndPositionLat { get; set; }

           // [JsonProperty("end_position_lng")]
            public string EndPositionLng { get; set; }

            //[JsonProperty("end_position_display")]
            public string EndPositionDisplay { get; set; }

            //[JsonProperty("duration")]
            public DateTimeOffset? Duration { get; set; }

            //[JsonProperty("distanceKm")]
            public double? DistanceKm { get; set; }

            //[JsonProperty("tag")]
            //public string Tag { get; set; }

            //public string positionDisplay { get; set; }





            //[JsonProperty("device")]
            //Foreign Key to Device object
            public Guid FK_Device { get; set; }
            // navigation property 
            public Device Device { get; set; }


            // One-to-many relationship
            public ICollection<Measurement> Measurements { get; set; }

            // One-to-many relationship
            public ICollection<DRDMeasurement> DRDMeasurements { get; set; }

        // Creation History
        public DateTimeOffset  Created_Date  { get; set; }

            // Last Update History
            public DateTimeOffset Updated_Date { get; set; }


        }

        //public partial class PositionDisplay
        //{
        //    [JsonProperty("city")]
        //    public string City { get; set; }

        //    [JsonProperty("house_number", NullValueHandling = NullValueHandling.Ignore)]
        //    public string HouseNumber { get; set; }

        //    [JsonProperty("country")]
        //    public string Country { get; set; }

        //    [JsonProperty("county")]
        //    public string County { get; set; }

        //    [JsonProperty("suburb")]
        //    public string Suburb { get; set; }

        //    [JsonProperty("state")]
        //    public string State { get; set; }

        //    [JsonProperty("postcode")]
        //    [JsonConverter(typeof(ParseStringConverter))]
        //    public long Postcode { get; set; }

        //    [JsonProperty("country_code")]
        //    public string CountryCode { get; set; }

        //    [JsonProperty("residential", NullValueHandling = NullValueHandling.Ignore)]
        //    public string Residential { get; set; }

        //    [JsonProperty("road")]
        //    public string Road { get; set; }

        //    [JsonProperty("neighbourhood", NullValueHandling = NullValueHandling.Ignore)]
        //    public string Neighbourhood { get; set; }
        //}

        public partial class Trip
        {
            public static Trip FromJson(string json) => JsonConvert.DeserializeObject<Trip>(json, Helpers.Converter.Settings);
        }




        //internal static class Converter
        //{
        //    public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        //    {
        //        MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
        //        DateParseHandling = DateParseHandling.None,
        //        Converters =
        //    {
        //        new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
        //    },
        //    };
        //}

        //internal class ParseStringConverter : JsonConverter
        //{
        //    public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        //    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        //    {
        //        if (reader.TokenType == JsonToken.Null) return null;
        //        var value = serializer.Deserialize<string>(reader);
        //        long l;
        //        if (Int64.TryParse(value, out l))
        //        {
        //            return l;
        //        }
        //        throw new Exception("Cannot unmarshal type long");
        //    }

        //    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        //    {
        //        if (untypedValue == null)
        //        {
        //            serializer.Serialize(writer, null);
        //            return;
        //        }
        //        var value = (long)untypedValue;
        //        serializer.Serialize(writer, value.ToString());
        //        return;
        //    }

        //    public static readonly ParseStringConverter Singleton = new ParseStringConverter();
        //}
    

}
